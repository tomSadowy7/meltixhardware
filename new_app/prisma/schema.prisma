generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RunSource { 
  SCHEDULE
  MANUAL 
  RAIN_GUARD
  } 

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  password  String
  firstName String
  lastName  String
  city      String
  state     String
  zip       String
  createdAt DateTime   @default(now())


  // New fields for email verification
  isVerified Boolean   @default(false)
  verificationCode String?

  //for password reset 
  resetCode         String?      // <-- ADD THIS
  resetCodeExpires  DateTime?

  homebase  HomeBase?  // 👈 Add this inverse relation
}

model HomeBase {
  id       String    @id @default(uuid())
  name     String
  user     User      @relation(fields: [userId], references: [id])
  userId   String    @unique
  devices  Device[]
}

model Device {
  id          String  @id
  name        String
  type        String
  lanName     String  //   <<< NEW
  homeBase    HomeBase @relation(fields:[homeBaseId], references:[id])
  homeBaseId  String
  sprinklerState SprinklerState?
  online      Boolean   @default(false)   // green / red dot in UI
  lastPingAt  DateTime?                   // for debugging

  schedules       Schedule[]   // ← inverse relation (NEW)

}

model SprinklerState {
  deviceId String @id                     // PK = FK
  device   Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  zone1 Boolean @default(false)
  zone2 Boolean @default(false)
  zone3 Boolean @default(false)
  zone4 Boolean @default(false)
}  

model Schedule {                                // one “program” the user toggles
  id          String   @id @default(cuid())
  name        String
  enabled     Boolean  @default(true)           // on/off switch
  rainGuard   Boolean  @default(false)          // skip when raining
  deviceId    String
  device      Device   @relation(fields:[deviceId], references:[id])
  slots       ScheduleSlot[]
  createdBy   String
  createdAt   DateTime @default(now())
}

model ScheduleSlot {
  id            String   @id @default(cuid())
  scheduleId    String
  schedule      Schedule @relation(fields:[scheduleId], references:[id], onDelete: Cascade)
  days          Int[]    // <--- CHANGED from dow: Int
  startBucket   Int      // 0-287 (5-min steps)
  bucketCount   Int      // duration / 5 mins
  zoneMask      Int      // bit-flags for zones 1-4
  @@index([startBucket]) // keep this, you can drop dow from index
}

model RunHistory {                              // audit of every ON/OFF
  id          String    @id @default(cuid())
  deviceId    String
  zoneMask    Int
  startedAt   DateTime
  endedAt     DateTime?
  source      RunSource
  scheduleId  String?
}

